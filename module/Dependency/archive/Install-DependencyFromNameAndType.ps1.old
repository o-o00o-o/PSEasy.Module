function Install-DependencyFromNameAndType {
    Param(
        # [Parameter(Mandatory)]
        # [string]
        # # Specifies the type of dependency to install
        # $Type,

        # [Parameter(Mandatory)]
        # [string]
        # # Specifies the type of dependency to install
        # $Name,

        [Parameter(Mandatory)]
        [PSCustomObject]
        # a a single dependency config object from Context.Dependency.X.Y
        $Dependency,

        [Parameter(Position = 2)]
        [string]
        # The destination folder to install to (if required)
        $Destination,

        [parameter()]
        [switch]
        # By default we won't install if already installed. Force will first remove then install again
        $Force,

        [parameter()]
        [switch]
        $ForceImport

        # [Parameter(Position, Mandatory)]
        # [ValidateSet('Install','Initialise')]
        # [string[]]
        # # Indicates if we should install the dependency or also initialise in the current session (sometimes you want to delay this due to DLL hell)
        # $Run = @('Install')
    )
    if ($Dependency.type -eq 'WebDownload') {
        Install-DependencyWebDownload -Name $Dependency.name -Version $Dependency.Version -Url $Dependency.Url -Destination $Destination -Force:$Force
    } elseif ($Dependency.type -eq 'Nuget') {
        Install-DependencyNuget -NugetPath (Join-Path $destination $context.nugetSubpath) -Name $Dependency.name -Version $Dependency.Version -Destination $Destination
    } elseif ($Dependency.type -eq 'Module') {
        $PreReleaseArg = @{}
        if ($Dependency.PSObject.Properties['preRelease']) {
           $PreReleaseArg.Add('PreRelease', $Dependency.PreRelease)
        }
        Install-DependencyPSModule -Name $Dependency.name -RequiredVersion $Dependency.Version -Force:$Force -ForceImport:$ForceImport.IsPresent @PreReleaseArg
    } elseif ($Dependency.type -eq 'PackageProvider') {
        Install-DependencyPSPackageProvider -Name $Dependency.name -RequiredVersion $Dependency.Version -Force:$Force
    } else {
        Write-Error "Type $($Dependency.type) not expected. No installer known"
    }
}
